/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Anthony Yanez (https://sketchfab.com/paulyanez)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/stargate-5ddae865059443b988f3fa51b8c1531c
Title: Stargate
*/

import React, { useRef, useState, useEffect } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { planePosition, timeAliveExternal } from "./Lvl2SpaceShip";
import { collectedObjs } from "./TargetsLvl2";
import { displayLevelCompletion } from "../Completion";

export let extGameOverStargate = false;

export function Stargate(props) {
  const group = useRef();
  const { nodes, materials, animations} = useGLTF("assets/models/stargate.glb");
  const [gameWon, setGameWon] = useState(false); //  state to track if game has been won
  const { actions, mixer } = useAnimations(animations, group);

  useEffect(() => {
    actions["Take 001"].play(); 
  }, [mixer]);

  // Scoring Algorithm logic
  const scoreCalculator = () => {
    let score = 0;
    if (timeAliveExternal <= 75) {
      score =   200 * (1 / timeAliveExternal) + (5 * collectedObjs); 
    } else if (timeAliveExternal > 75 && timeAliveExternal <= 150) {
      score =  500 * (1 / timeAliveExternal) + (10 * collectedObjs); 
    } else if (timeAliveExternal > 150) {
      score =  500 * (1 / timeAliveExternal) + (5 * collectedObjs);
    }
    return Math.round(score);
  };

  useFrame(() => {
    // Check level completion and implement scoring logic
      const handleGameCompletion = () => {
        if (!gameWon) {
          const leaderboardData = [{ name: "Player", timeLasted: scoreCalculator() }];
          setGameWon(true);
          const message = `Congrats! You've saved ${collectedObjs} astronauts!`;
          setTimeout(() => {
            displayLevelCompletion(1, leaderboardData, message);
          }, 1000);
        }
      };

      // Target Collision Updated Logic
      const distance = planePosition.distanceTo(group.current.position);

      // if the ship hits the target/ring
      if (distance <= 0.4) {
        console.log("u win");
        extGameOverStargate = true;
        handleGameCompletion();
      }
  });

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <group name="StargateFBX" rotation={[Math.PI / 2, 0, 0]}>
            <group name="Object_2">
              <group name="RootNode">
                <group
                  name="Stargate"
                  position={[-0.442, 0.062, 5.773]}
                  rotation={[-Math.PI / 2, 0, 0]}
                >
                  <group
                    name="Gate"
                    position={[0, 5.773, -0.725]}
                    rotation={[Math.PI / 2, 0, 0]}
                  >
                    <mesh
                      name="Gate_02_-_Default_0"
                      castShadow
                      receiveShadow
                      geometry={nodes["Gate_02_-_Default_0"].geometry}
                      material={materials["02_-_Default"]}
                    />
                    <mesh
                      name="Gate_03_-_Default_0"
                      castShadow
                      receiveShadow
                      geometry={nodes["Gate_03_-_Default_0"].geometry}
                      material={materials["03_-_Default"]}
                    />
                  </group>
                  <group
                    name="Portal"
                    position={[0, 5.773, -0.725]}
                    rotation={[Math.PI / 2, 0, 0]}
                  >
                    <mesh
                      name="Portal_01_-_Default_0"
                      castShadow
                      receiveShadow
                      geometry={nodes["Portal_01_-_Default_0"].geometry}
                      material={materials["01_-_Default"]}
                    />
                  </group>
                  <group
                    name="Ring"
                    position={[0, 5.773, -0.725]}
                    rotation={[Math.PI / 2, 0, 0]}
                  >
                    <mesh
                      name="Ring_02_-_Default_0"
                      castShadow
                      receiveShadow
                      geometry={nodes["Ring_02_-_Default_0"].geometry}
                      material={materials["02_-_Default"]}
                    />
                  </group>
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("assets/models/stargate.glb");
